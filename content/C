# Printing in C# #

This guide demonstrates various methods to print output in C# using the
`Console` class.

## Basic Console Output ##

To print text to the console, use the `Console.Write()` or `Console.WriteLine()`
methods:

```csharp
Console.Write("Hello, ");
Console.WriteLine("World!");
```

The `Write()` method prints without a newline, while `WriteLine()` adds a
newline after the text.

## Formatting Output ##

Use string interpolation or the `string.Format()` method for formatted output:

```csharp
string name = "Alice";
int age = 30;

// Using string interpolation
Console.WriteLine($"Name: {name}, Age: {age}");

// Using string.Format()
Console.WriteLine(string.Format("Name: {0}, Age: {1}", name, age));
```

## Printing Numbers ##

For numeric values, you can specify formatting options:

```csharp
double pi = Math.PI;
Console.WriteLine($"Pi: {pi:F2}"); // Prints Pi to 2 decimal places

int number = 42;
Console.WriteLine($"Number: {number:D4}"); // Prints number with leading zeros
```

## Printing to File ##

To print output to a file, use the `System.IO.File` class:

```csharp
using System.IO;

string content = "Hello, World!";
File.WriteAllText("output.txt", content);
```

## Using StringWriter for Testing ##

For unit testing or capturing console output, use `StringWriter`:

```csharp
using System.IO;

StringWriter sw = new StringWriter();
Console.SetOut(sw);

Console.WriteLine("Test output");
string result = sw.ToString().Trim();

// Assert or use the result as needed
```

Remember to handle exceptions and close resources properly when working with
files or streams.
